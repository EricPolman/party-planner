/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RsvpRouteImport } from './routes/rsvp'
import { Route as PlannerRouteImport } from './routes/planner'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PlannerIndexRouteImport } from './routes/planner.index'
import { Route as RsvpEventIdRouteImport } from './routes/rsvp.$eventId'
import { Route as PlannerNewRouteImport } from './routes/planner.new'
import { Route as PlannerEventIdRouteImport } from './routes/planner.$eventId'

const RsvpRoute = RsvpRouteImport.update({
  id: '/rsvp',
  path: '/rsvp',
  getParentRoute: () => rootRouteImport,
} as any)
const PlannerRoute = PlannerRouteImport.update({
  id: '/planner',
  path: '/planner',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlannerIndexRoute = PlannerIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PlannerRoute,
} as any)
const RsvpEventIdRoute = RsvpEventIdRouteImport.update({
  id: '/$eventId',
  path: '/$eventId',
  getParentRoute: () => RsvpRoute,
} as any)
const PlannerNewRoute = PlannerNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => PlannerRoute,
} as any)
const PlannerEventIdRoute = PlannerEventIdRouteImport.update({
  id: '/$eventId',
  path: '/$eventId',
  getParentRoute: () => PlannerRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/planner': typeof PlannerRouteWithChildren
  '/rsvp': typeof RsvpRouteWithChildren
  '/planner/$eventId': typeof PlannerEventIdRoute
  '/planner/new': typeof PlannerNewRoute
  '/rsvp/$eventId': typeof RsvpEventIdRoute
  '/planner/': typeof PlannerIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/rsvp': typeof RsvpRouteWithChildren
  '/planner/$eventId': typeof PlannerEventIdRoute
  '/planner/new': typeof PlannerNewRoute
  '/rsvp/$eventId': typeof RsvpEventIdRoute
  '/planner': typeof PlannerIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/planner': typeof PlannerRouteWithChildren
  '/rsvp': typeof RsvpRouteWithChildren
  '/planner/$eventId': typeof PlannerEventIdRoute
  '/planner/new': typeof PlannerNewRoute
  '/rsvp/$eventId': typeof RsvpEventIdRoute
  '/planner/': typeof PlannerIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/planner'
    | '/rsvp'
    | '/planner/$eventId'
    | '/planner/new'
    | '/rsvp/$eventId'
    | '/planner/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/rsvp'
    | '/planner/$eventId'
    | '/planner/new'
    | '/rsvp/$eventId'
    | '/planner'
  id:
    | '__root__'
    | '/'
    | '/planner'
    | '/rsvp'
    | '/planner/$eventId'
    | '/planner/new'
    | '/rsvp/$eventId'
    | '/planner/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PlannerRoute: typeof PlannerRouteWithChildren
  RsvpRoute: typeof RsvpRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/rsvp': {
      id: '/rsvp'
      path: '/rsvp'
      fullPath: '/rsvp'
      preLoaderRoute: typeof RsvpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/planner': {
      id: '/planner'
      path: '/planner'
      fullPath: '/planner'
      preLoaderRoute: typeof PlannerRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/planner/': {
      id: '/planner/'
      path: '/'
      fullPath: '/planner/'
      preLoaderRoute: typeof PlannerIndexRouteImport
      parentRoute: typeof PlannerRoute
    }
    '/rsvp/$eventId': {
      id: '/rsvp/$eventId'
      path: '/$eventId'
      fullPath: '/rsvp/$eventId'
      preLoaderRoute: typeof RsvpEventIdRouteImport
      parentRoute: typeof RsvpRoute
    }
    '/planner/new': {
      id: '/planner/new'
      path: '/new'
      fullPath: '/planner/new'
      preLoaderRoute: typeof PlannerNewRouteImport
      parentRoute: typeof PlannerRoute
    }
    '/planner/$eventId': {
      id: '/planner/$eventId'
      path: '/$eventId'
      fullPath: '/planner/$eventId'
      preLoaderRoute: typeof PlannerEventIdRouteImport
      parentRoute: typeof PlannerRoute
    }
  }
}

interface PlannerRouteChildren {
  PlannerEventIdRoute: typeof PlannerEventIdRoute
  PlannerNewRoute: typeof PlannerNewRoute
  PlannerIndexRoute: typeof PlannerIndexRoute
}

const PlannerRouteChildren: PlannerRouteChildren = {
  PlannerEventIdRoute: PlannerEventIdRoute,
  PlannerNewRoute: PlannerNewRoute,
  PlannerIndexRoute: PlannerIndexRoute,
}

const PlannerRouteWithChildren =
  PlannerRoute._addFileChildren(PlannerRouteChildren)

interface RsvpRouteChildren {
  RsvpEventIdRoute: typeof RsvpEventIdRoute
}

const RsvpRouteChildren: RsvpRouteChildren = {
  RsvpEventIdRoute: RsvpEventIdRoute,
}

const RsvpRouteWithChildren = RsvpRoute._addFileChildren(RsvpRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PlannerRoute: PlannerRouteWithChildren,
  RsvpRoute: RsvpRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
